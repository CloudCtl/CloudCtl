############################################################################
# Configure Host
  tasks:

    # Distribution Support
    #  Supported Distributions:
    #  - Fedora 32+
    #  - Ubuntu 20.04+
    - include_vars: 'include/variables/{{ ansible_os_family }}'

    ####### Add /usr/local/bin to PATH
    - name: '{{ ansible_name_module }} | copy | Add /usr/local/bin to $PATH'
      copy:
        dest: {{ ccio_home }}/profile.d/usr-local-bin-to-path.sh
        content: 'PATH=$PATH:/usr/local/bin'

    ####### Install packages
    - name: '{{ ansible_name_module_cloud }} | include | {{ ansible_os_family }} | Install Packages'
      include_tasks: 'include/packages/url-packages-{{ ansible_os_family }}'

#    ####### Start Docker Service
#    - name: '{{ ansible_name_module }} | systemd | {{ ansible_os_family }} | Start Docker service'
#      systemd:
#        name: docker
#        state: started
#        enabled: yes
#
#    ####### Disable Firewalld (OpenWRT takes over firewall function)
#    - name: '{{ ansible_name_module }} | systemd | {{ ansible_os_family }} | Disable Firewalld service'
#      systemd:
#        name: firewalld
#        state: stopped
#        enabled: no
#
#    - name: "{{ ansible_name_module }} | file | Create Directories"
#      file:
#        group: ccio
#        path: "{{ item }}"
#        owner: "{{ local_user }}"
#        state: directory
#        recurse: yes
#        mode: '775'
#      with_items:
#        - "{{ ccio_home }}/profile.d"
#        - "{{ local_home }}/.config/lxc"
#      delegate_to: localhost
#
#    - name: "{{ ansible_name_module }} | file | Purge LXD Certs"
#      file:
#        state: absent
#        path: "{{ local_home }}/.config/lxc/servercerts"
#      delegate_to: localhost
#
#    - name: "{{ ansible_name_module }} | group | Create Group 'LXD'"
#      group:
#        name: lxd
#        system: true
#        state: present
#    - user:
#        name: "{{ ansible_user_connected.stdout }}"
#        groups: ccio,lxd
#        append: yes
#
##   - name: "{{ ansible_name_module }} | template | global default variables"
##     delegate_to: localhost
##     template:
##       src: "{{ item }}"
##       dest: "{{ ccio_home }}/ensign/instance/gcp/ansible/tf/lxd/state.tf"
##       owner: "{{ ansible_user_connected.stdout }}"
##       group: "ccio"
##       mode: '755'
##     with_items: 
##       - "templates/tf/lxd/terraform.tfstate.j2"
#
#    - name: "{{ ansible_name_module }} | file | Build Assets Directory Tree"
#      file:
#        state: directory
#        owner: "{{ ansible_user_connected.stdout }}"
#        group: ccio
#        recurse: yes
#        mode: '775'
#        path: "{{ item }}"
#      with_items:
#        - "{{ ccio_home }}/etc/openwrt/config"
#        - "/etc/ccio/start.d/"
#        - "/etc/ccio/bin/"
#
#    - name: "{{ ansible_name_module }} | template | Write CCIO Systemd Network Configuration"
#      template:
#        src: "{{ item.name }}"
#        dest: "{{ item.dest }}"
#        mode: "{{ item.mode }}"
#        owner: "root"
#        group: "ccio"
#      loop: 
#        - { mode: '755', name: 'ovs-clear.j2', dest: '/usr/bin/ovs-clear'}
#        - { mode: '755', name: 'ccio.sh.j2',   dest: '/etc/ccio/bin/ccio'}
#
#    - name: "{{ ansible_name_module }} | command.systemctl | SystemCTL Daemon Reload"
#      command: systemctl daemon-reload
#
#    - name: "{{ ansible_name_module }} | command.hostnamectl | Set Hostname"
#      command: hostnamectl set-hostname ensign.ministack.dev
#    - name: "{{ ansible_name_module }} | blockinfile | Add localhost as ensign.ministack.dev"
#      blockinfile:
#        path: /etc/hosts
#        create: yes
#        block: |
#          {{ ansible_default_ipv4.address }} ensign.ministack.dev ensign
#
#    - name: "{{ ansible_name_module }} | apt_key | Add Podman Repo Key"
#      apt_key:
#        url: "https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_20.04/Release.key"
#        state: present
#    - name: "{{ ansible_name_module }} | apt | Update Cache"
#      apt:
#        update_cache: yes
#    - name: "{{ ansible_name_module }} | package | Update All Packages"
#      package:
#        name: "*"
#        state: latest
#    - name: "{{ ansible_name_module }} | package | Install Base Required Packages"
#      package:
#        name: "{{ packages_base_ubuntu }}"
#        state: present
#
#    - name: "{{ ansible_name_module }} | service | Enable & Start Networkd + OpenVSwitch"
#      service:
#        name: "{{ item }}"
#        enabled: yes
#      with_items:
#        - openvswitch-switch
#        - ccio
#
#    # Build Podman Pod
